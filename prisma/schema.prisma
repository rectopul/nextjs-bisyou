// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  username      String   @unique @db.VarChar(255)
  password_hash String
  role          String

  @@map("users")
}

model ShopLocations {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  phone          String?
  street_address String
  street_number  Int
  suite_number   String?
  city           String
  state          String
  postal_code    String
  country        String?
  address_line1  String
  address_line2  String
  maps_url       String

  @@map("shop_locations")
}

model ImagesSlideDefault {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  alt       String
  src       String
  width     Int
  heigth    Int

  @@map("images_slide_default")
}

model ImagePages {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  alt       String
  src       String
  width     Int
  heigth    Int
  page      Pages    @relation(fields: [page_id], references: [id], onDelete: Cascade)
  page_id   Int      @unique

  @@map("image_page")
}

model Category {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  title         String
  slug          String          @unique
  description   String
  CategoryPages CategoryPages[]

  @@map("category")
}

model CategoryPages {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  page        Pages    @relation(fields: [pages_id], references: [id], onDelete: Cascade)
  category_id Int
  pages_id    Int

  @@index([category_id, pages_id])
  @@map("category_pages")
}

model Pages {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  title         String
  slug          String
  category      Int?
  excerpt       String?
  description   String?
  content       String
  status        String
  image         ImagePages?
  CategoryPages CategoryPages[]
}

model Banners {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  title     String?
  position  String?
  url       String
  status    String
  image     BannersImage?

  @@map("banners")
}

model BannersThumbnail {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  src        String
  name       String
  alt        String
  width      Int
  heigth     Int
  md         String
  sm         String
  lg         String
  md_key     String       @default("MD_AWSBUCKET")
  sm_key     String       @default("SM_AWSBUCKET")
  lg_key     String       @default("LG_AWSBUCKET")
  image      BannersImage @relation(fields: [banners_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  banners_id Int          @unique

  @@map("banners_thumbnail")
}

model Images {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  type        String
  alt         String
  width       Int
  height      Int
  ImagesSizes ImagesSizes[]

  @@map("images")
}

model ImagesSizes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Images   @relation(fields: [imagesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imagesId  Int
  full      String
  md        String
  sm        String
  xs        String

  @@map("images_sizes")
}

model BannersImage {
  id         Int               @id @default(autoincrement())
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  src        String
  name       String
  mobile     String?
  mobile_key String?
  alt        String
  width      Int
  heigth     Int
  key        String            @default("AWS_BUCKET")
  banner     Banners           @relation(fields: [banners_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  banners_id Int               @unique
  thumbnail  BannersThumbnail?

  @@map("banners_image")
}

model RullerOptions {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  slug      String

  @@map("rulle_options")
}

model MiniBanners {
  id         Int                @id @default(autoincrement())
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  url        String
  name       String
  slug       String
  type       String
  image      MiniBannersImages?
  settingsId Int?

  @@map("mini_banners")
}

model MiniBannersImages {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  src            String
  name           String
  alt            String
  width          Int
  heigth         Int
  miniBanner     MiniBanners @relation(fields: [miniBanners_id], references: [id])
  miniBanners_id Int         @unique

  @@map("mini_banners_images")
}

model Settings {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  storename              String   @unique
  storeSlug              String   @unique
  about                  String?
  cnpj                   String?
  section_partners       String?
  section_partners_title String?
  video                  String?
  description            String?
  defaultColor           String?
  textColor              String?
  phone                  String?
  email                  String?
  logo                   String?
  product_video          String?
  shopping_cards         String?

  @@map("settings")
}

model Colletions {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  slug              String   @unique
  position          String
  products_quantity Int

  @@map("collections")
}

model Partners {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  slug      String   @unique
  url       String?
  text      String?
  image     String
  width     Int
  height    Int
  alt       String

  @@map("partners")
}
